---
// warning: This file is overwritten by Astro Accelerator

import { Accelerator } from 'astro-accelerator-utils';
import type { Frontmatter } from 'astro-accelerator-utils/types/Frontmatter';
import type { MarkdownInstance } from 'astro';
import { SITE } from '@config';
import { getImageInfo } from '@util/custom-markdown.mjs';
import AuthorsMini from '@components/AuthorsMini.astro';

const accelerator = new Accelerator(SITE);
const stats = new accelerator.statistics('accelerator/components/ArticleList.astro');
stats.start();

// Properties
type Props = {
  lang: string;
  posts: MarkdownInstance<Record<string, any>>[]
};
const { lang, posts } = Astro.props satisfies Props;

// Logic
type ImageInfo = {
  src: string;
  srcset: string;
  sizes: string;
  class: string;
  metadata: {
    width: number;
    height: number;
  }
};

type Article = {
  url: string;
  title: string;
  frontmatter: Record<string, any>;
  img: ImageInfo | null;
};

const articles: Article[] = [];

for (let p of posts) {
  const item = {
    url: p.url ?? '',
    title: await accelerator.markdown.getTextFrom(p.frontmatter?.title),
    frontmatter: p.frontmatter,
    img: p.frontmatter.bannerImage
      ? getImageInfo(p.frontmatter.bannerImage.src, '', SITE.images.listerSize)
      : null
  };

  articles.push(item)
}

let articleIndex = 0;
function getLoadingAttribute() {
  articleIndex++;
  return articleIndex > 2
    ? 'lazy'
    : 'eager';
}

stats.stop();
---
<ul class="post-list anim-show-parent">
  {articles.map((post) => (
  <li class="list-item" data-destination={ accelerator.urlFormatter.formatAddress(post.url) } data-image={ (post.frontmatter.bannerImage?.src.length > 0).toString() }>
    <article>
      <div class="list-item-image">
      {post.img && (
        <img
          srcset={ post.img.srcset }
          sizes={ post.img.sizes }
          src={ post.img.src }
          alt={ post.frontmatter.bannerImage.alt }
          class={ post.img.class }
          width={ post.img.metadata?.width }
          height={ post.img.metadata?.height }
          loading={ getLoadingAttribute() } />
      )}
      </div>
      <div class="list-item-content">
        <h3>
          <a href={ accelerator.urlFormatter.formatAddress(post.url) }>{ post.title }</a>
        </h3>
        <AuthorsMini lang={ lang } frontmatter={ post.frontmatter satisfies Frontmatter } />
      </div>
    </article>
  </li>
  ))}
</ul>