---
// warning: This file is overwritten by Astro Accelerator

// For listing all articles in this folder
import { PostFiltering, PostOrdering, Accelerator } from 'astro-accelerator-utils';
import type { Frontmatter } from 'astro-accelerator-utils/types/Frontmatter';
import type { MarkdownInstance } from 'astro-accelerator-utils/types/Astro';
import type { Page } from 'astro';
import { Translations, Lang } from '@util/Languages';
import { SITE } from '@config';
import Default from 'src/layouts/Default.astro';
import ArticleList from '@components/ArticleList.astro';
import PagingLinks from '@components/PagingLinks.astro';
import { getImageInfo } from '@util/custom-markdown.mjs';

const accelerator = new Accelerator(SITE);
const stats = new accelerator.statistics('pages/authors/[author]/[page].astro');
stats.start();

const lang = SITE.default.lang;
const currentUrl = new URL(Astro.request.url);
const slug = accelerator.urlFormatter.getAuthorId(currentUrl);

const author = accelerator.posts.all()
  .filter(PostFiltering.isAuthor)
  .filter(x => {
    if (!x.url) {
      return false;
    }

    const url = new URL(x.url, SITE.url);
    return accelerator.urlFormatter.getAuthorId(url) == slug;
  })[0];

// Language
const _ = Lang(lang);

// Props
type Props = {
  page: Page<MarkdownInstance>;
  headings: { depth: number; slug: string; text: string; }[];
  pubDate: Date;
};
const { title, page, headings, pubDate } = Astro.props satisfies Props;

const authorFrontmatter = {
  ...author.frontmatter,
  titleAdditional: `(${ _(Translations.articles.author) }) ` + _(Translations.articles.page_title).replace('{n}', page.currentPage.toString()),
  pubDate: pubDate
} as Frontmatter;

const text = (author.frontmatter.summary ?? '').replace('\n', '\n\n');
const authorText = accelerator.markdown.getHtmlFrom(text);

// Logic
type AuthorData = {
  posts: MarkdownInstance[];
  authors: string[];
}

export async function getData() {
  const sourcePosts = await Astro.glob(['../../**/*.md*']) satisfies MarkdownInstance[];
  const data: AuthorData = { posts: [], authors: []};

  data.posts = sourcePosts
    .filter(PostFiltering.isListable)
    .sort(PostOrdering.sortByPubDateDesc);

    data.posts.forEach(p => {
    const authorList: string[] = p.frontmatter.authors ?? [];
    if (authorList.length == 0) {
      console.log('No authors found', p.url);
    }
    authorList.forEach(a => {
      if (!data.authors.includes(a)) {
        data.authors.push(a);
      }
    });
  });
    
  return data;
}

export async function getStaticPaths({ paginate }: any) {
  let data = await getData();

  return data.authors.map(a => {
    const filtered = data.posts.filter(p => {
      const authorList: string[] = p.frontmatter.authors ?? [];
      return authorList.includes(a);
    });
    return paginate(filtered, { 
        params: { author: a.toLowerCase() },
        props: { pubDate: filtered[0].frontmatter.pubDate },
        pageSize: SITE.pageSize 
    });
  }).flat();
}

// Get image info
const authorImage = author.frontmatter.bannerImage?.src 
  ? getImageInfo(author.frontmatter.bannerImage.src, 'author-image', SITE.images.authorSize)
  : null;

// Page Links
const pageLinks = accelerator.paging.links(SITE.pageLinks, page.lastPage, page.currentPage, page.url.current);

// Breadcrumbs
const breadcrumbs: { url: string; title: string; ariaCurrent?: string; }[] = []

if (page.url.current != pageLinks[0].url) {
  breadcrumbs.push({
    url: page.url.current,
    title: _(Translations.articles.page_title).replace('{n}', page.currentPage.toString()),
    ariaCurrent: 'page',
  });
}

stats.stop();
---
<Default frontmatter={ authorFrontmatter } headings={ headings } breadcrumbs={ breadcrumbs }>
  <div class="author-page">
    {authorImage && 
      <img
        srcset={ authorImage.srcset }
        sizes={ authorImage.sizes }
        src={ authorImage.src }
        alt={ author.frontmatter.bannerImage?.alt }
        class={ authorImage.class }
        width={ authorImage.metadata?.width }
        height={ authorImage.metadata?.height }
        />
    }
    <div class="author-info">
      <Fragment set:html={ authorText } />
      {author.frontmatter.links && 
      <ul>
      {author.frontmatter.links.map((link) => (
        <li><a href={ link.url } rel={ link.rel }><Fragment set:html={ link.text } /></a></li>
      ))}
      </ul>
      }
    </div>
  </div>
  <h2>{ _(Translations.articles.page_title).replace('{n}', page.currentPage.toString()) }</h2>
  <ArticleList lang={ lang } posts={ page.data } />
  <PagingLinks lang={ lang } page={ page } pageLinks={ pageLinks } />
</Default>